diff --git a/final_assignment/.vscode/settings.json b/final_assignment/.vscode/settings.json
index 273d189..35da3e9 100644
--- a/final_assignment/.vscode/settings.json
+++ b/final_assignment/.vscode/settings.json
@@ -2,5 +2,6 @@
     "files.associations": {
         "limits": "cpp",
         "vector": "c"
-    }
+    },
+    "python.pythonPath": "/usr/bin/python3"
 }
\ No newline at end of file
diff --git a/final_assignment/lib/dictionary/dictionary.h b/final_assignment/lib/dictionary/dictionary.h
index e69de29..b791f2f 100644
--- a/final_assignment/lib/dictionary/dictionary.h
+++ b/final_assignment/lib/dictionary/dictionary.h
@@ -0,0 +1,13 @@
+#ifndef DICTIONARY_H
+#define DICTIONARY_H
+
+#include "../general/general.h"
+
+typedef struct __Dictionary {
+  int id;
+  char* word;
+} Dictionary;
+
+COMPARE DictionaryCompare(void*, void*);
+
+#endif
\ No newline at end of file
diff --git a/final_assignment/lib/general/general.c b/final_assignment/lib/general/general.c
index cb2c53b..eb070f9 100644
--- a/final_assignment/lib/general/general.c
+++ b/final_assignment/lib/general/general.c
@@ -3,9 +3,18 @@
 void PrintError(char err[]) {
   // clang-format off
   fprintf(stderr,
-          ANSI_COLOR_RED "[!] " ANSI_COLOR_YELLOW "ERROR: %s\n" ANSI_COLOR_RESET,
+          ANSI_COLOR_YELLOW "[!] " ANSI_COLOR_RED "ERROR: %s\n" ANSI_COLOR_RESET,
           err);
   // clang-format on
 }
 
+void PrintInfo(char info[]) {
+  // clang-format off
+  fprintf(stdout,
+          ANSI_COLOR_YELLOW "[!] " ANSI_COLOR_GREEN "INFO: %s\n" ANSI_COLOR_RESET,
+          info
+  );
+  // clang-format on
+}
+
 void Println(char content[]) { printf("%s\n", content); }
\ No newline at end of file
diff --git a/final_assignment/lib/general/general.h b/final_assignment/lib/general/general.h
index a51735a..f712836 100644
--- a/final_assignment/lib/general/general.h
+++ b/final_assignment/lib/general/general.h
@@ -4,14 +4,22 @@
 
 #define ANSI_COLOR_RED "\x1b[31m"
 #define ANSI_COLOR_YELLOW "\x1b[33m"
+#define ANSI_COLOR_GREEN "\x1b[32m"
 #define ANSI_COLOR_RESET "\x1b[0m"
 
-void PrintError(char err[]);
-void Println(char content[]);
+void PrintError(char[]);
+void PrintInfo(char[]);
+void Println(char[]);
 
 typedef enum __BOOL {
   TRUE = 1,
   FALSE = 0,
   UNKNOWN = -1,
 } BOOL;
+
+typedef enum __COMPARE {
+  BIGGER,
+  SMALLER,
+  EQUAL,
+} COMPARE;
 #endif
\ No newline at end of file
diff --git a/final_assignment/lib/linkedlist/linkedlist.c b/final_assignment/lib/linkedlist/linkedlist.c
index ff9e931..9bde834 100644
--- a/final_assignment/lib/linkedlist/linkedlist.c
+++ b/final_assignment/lib/linkedlist/linkedlist.c
@@ -3,23 +3,27 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-LinkedList NewLinkedList() {
-  LinkedList newLinkedList;
-  newLinkedList.head = NULL;
-  newLinkedList.tail = NULL;
+LinkedList* NewLinkedList(void* Compare) {
+  LinkedList* newLinkedList = (LinkedList*)malloc(sizeof(LinkedList));
+  newLinkedList->head = NULL;
+  newLinkedList->tail = NULL;
 
-  newLinkedList.Insert = LinkedListInsert;
-  newLinkedList.Delete = LinkedListDelete;
+  newLinkedList->Compoare = Compare;
+
+  newLinkedList->Insert = LinkedListInsert;
+  newLinkedList->Delete = LinkedListDelete;
+  newLinkedList->Append = LinkedListAppend;
 
   return newLinkedList;
 }
 
-BOOL LinkedListInsert(LinkedList* self, int data) {
+BOOL LinkedListInsert(LinkedList* self, int key, void* data) {
   Node* newNode = (Node*)malloc(sizeof(Node));
   if (newNode == NULL) {
     PrintError("Failed to allocate memory");
     return FALSE;
   }
+  newNode->key = key;
   newNode->data = data;
 
   if (self->head == NULL) {
@@ -30,7 +34,7 @@ BOOL LinkedListInsert(LinkedList* self, int data) {
 
   Node* prev = NULL;
   Node* curr = self->head;
-  while (curr->data < data) {
+  while (key > curr->key) {
     prev = curr;
     curr = curr->next;
     if (curr == NULL) {
@@ -49,17 +53,17 @@ BOOL LinkedListInsert(LinkedList* self, int data) {
   return TRUE;
 }
 
-BOOL LinkedListDelete(LinkedList* self, int data) {
+BOOL LinkedListDelete(LinkedList* self, int key) {
   Node* prev = NULL;
   Node* curr = self->head;
 
-  while (curr->data < data) {
+  while (key > curr->key) {
     prev = curr;
     curr = curr->next;
     if (curr == NULL) {
       return FALSE;
     }
-    if (curr->data == data) {
+    if (key == curr->key) {
       prev->next = curr->next;
       free(curr);
       return TRUE;
@@ -67,4 +71,23 @@ BOOL LinkedListDelete(LinkedList* self, int data) {
   }
 
   return UNKNOWN;
+}
+
+BOOL LinkedListAppend(LinkedList* self, int key, void* data) {
+  Node* newNode = (Node*)malloc(sizeof(Node));
+  if (newNode == NULL) {
+    PrintError("Failed to allocate memory");
+    return FALSE;
+  }
+  newNode->key = key;
+  newNode->data = data;
+
+  if (self->head == NULL) {
+    self->head = newNode;
+    self->tail = newNode;
+    return TRUE;
+  }
+  self->tail->next = newNode;
+  self->tail = newNode;
+  return TRUE;
 }
\ No newline at end of file
diff --git a/final_assignment/lib/linkedlist/linkedlist.h b/final_assignment/lib/linkedlist/linkedlist.h
index 0d814b2..fd0e022 100644
--- a/final_assignment/lib/linkedlist/linkedlist.h
+++ b/final_assignment/lib/linkedlist/linkedlist.h
@@ -3,7 +3,8 @@
 #include "../general/general.h"
 
 typedef struct __Node {
-  int data;
+  int key;
+  void* data;
   struct __Node* next;
 } Node;
 
@@ -11,12 +12,17 @@ typedef struct __LinkedList {
   Node* head;
   Node* tail;
 
-  BOOL (*Insert)(struct __LinkedList*, int);
+  COMPARE (*Compoare)(void*, void*);
+
+  BOOL (*Insert)(struct __LinkedList*, int, void*);
   BOOL (*Delete)(struct __LinkedList*, int);
+  BOOL (*Append)(struct __LinkedList*, int, void*);
 } LinkedList;
 
-LinkedList NewLinkedList();
+LinkedList* NewLinkedList(void*);
 
-BOOL LinkedListInsert(LinkedList*, int);
+BOOL LinkedListInsert(LinkedList*, int, void*);
 BOOL LinkedListDelete(LinkedList*, int);
+BOOL LinkedListAppend(LinkedList*, int, void*);
+void* LinkedListSearch(LinkedList*, int);
 #endif
\ No newline at end of file
diff --git a/final_assignment/makefile b/final_assignment/makefile
index 996c4c1..992dbb6 100644
--- a/final_assignment/makefile
+++ b/final_assignment/makefile
@@ -1,6 +1,6 @@
 CC=gcc
 CFLAGS=-g -Wall
-OBJS=src/index.o lib/general/general.o lib/vector/vector.o lib/avl/avl.o lib/linkedlist/linkedlist.o
+OBJS=src/index.o lib/general/general.o lib/linkedlist/linkedlist.o lib/string/string.o
 TARGET=index
 
 $(TARGET): $(OBJS)
@@ -11,6 +11,7 @@ general.o: lib/general/general.h lib/general/general.c
 vector.o: lib/vector/vector.h lib/vector/vector.c lib/general/general.o
 avl.o: lib/avl/avl.h lib/avl/avl.c lib/general/general.o
 linkedlist.o: lib/linkedlist/linkedlist.h lib/linkedlist/linkedlist.c lib/general/general.o
+string.o: lib/string/string.h lib/string/string.c
 
 clear:
 	find . -type f -name '*.o' -delete
diff --git a/final_assignment/src/index.c b/final_assignment/src/index.c
index 9288611..a61374d 100644
--- a/final_assignment/src/index.c
+++ b/final_assignment/src/index.c
@@ -1,10 +1,13 @@
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 
 #include "../lib/general/general.h"
-#include "../lib/vector/vector.h"
+#include "../lib/linkedlist/linkedlist.h"
+#include "../lib/string/string.h"
 
-Vector getWordsFromFile(char*);
+LinkedList* getWordsFromFile(char*);
+LinkedList* generate2GramList();
 
 int main(int argc, char* argv[]) {
   if (argc != 2) {
@@ -12,13 +15,17 @@ int main(int argc, char* argv[]) {
     return 1;
   }
 
-  Vector words = getWordsFromFile(argv[1]);
+  LinkedList* words = getWordsFromFile(argv[1]);
+  PrintInfo("File read completed");
+
+  LinkedList* twoGramList = generate2GramList();
+  PrintInfo("Generate gram list completed");
 
   return 0;
 }
 
-Vector getWordsFromFile(char* filename) {
-  Vector words = NewVector();
+LinkedList* getWordsFromFile(char* filename) {
+  LinkedList* words = NewLinkedList(StringCompare);
 
   FILE* wordsFile = fopen(filename, "r");
   if (wordsFile == NULL) {
@@ -26,16 +33,38 @@ Vector getWordsFromFile(char* filename) {
     return words;
   }
 
+  int count = 0;
   while (TRUE) {
     if (feof(wordsFile)) {
       break;
     }
-    char* buffer = (char*)malloc(sizeof(char) * 100);
-    fgets(buffer, sizeof(buffer), wordsFile);
-    words.Push(&words, buffer);
+    char buffer[100];
+    fscanf(wordsFile, "%s", buffer);
+    String* word = NewString(buffer);
+    words->Insert(words, count, (void*)word);
+    count++;
   }
 
   fclose(wordsFile);
 
   return words;
-}
\ No newline at end of file
+}
+
+LinkedList* generate2GramList() {
+  LinkedList* twoGramList = NewLinkedList(StringCompare);
+
+  int count = 0;
+  for (int i = 'a'; i < 'z'; ++i) {
+    for (int j = 'a'; j < 'z'; ++j) {
+      char temp[3];
+      temp[0] = i;
+      temp[1] = j;
+      temp[2] = '\0';
+      String* gram = NewString(temp);
+      twoGramList->Insert(twoGramList, count, gram);
+      count++;
+    }
+  }
+
+  return twoGramList;
+}
